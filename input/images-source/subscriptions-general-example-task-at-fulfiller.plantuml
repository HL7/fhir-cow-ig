@startuml
'skinparam svgDimensionStyle false
title Task at Fulfiller Overview

autonumber

==Pre-Coordination==
Placer --> Placer: Register Fulfiller as a client

Fulfiller <-- Fulfiller: Register Placer as a Client

Placer --> Fulfiller: Inform Fulfiller of their channel on which to receive SubscriptionStatus-notification bundles

Fulfiller <-- Fulfiller: Create an administrative subscription for the Placer on Tasks which the Placer creates 

Fulfiller --> Placer: Inform Placer on their own channel

Placer --> Placer: Create an administrative subscription for the Fulfiller on ServiceRequests for which\nthere is a Task designating the Fulfiller as the intended performer in Task.performer

note over Placer, Fulfiller: Fulfiller can be notified if supporting info is added\nOther subscriptions, like for Patient Demographics info, are also possible.\nNote that the subscription is just an identifier and need not be a surfacable resource.



==Create Request==
Placer -> Placer: Create Order, ServiceRequest

Placer -> Fulfiller: Task.Create

note over Placer, Fulfiller: Task.basedOn is the ServiceRequest at the Placer. The Placer may include supporting information in\n ServiceRequest.info or in the Task if Fulfiller-specific

Fulfiller -> Placer: Query ServiceRequest.supportingInfo, ServiceRequest.reason, etc.

Fulfiller <- Fulfiller: Update Task.businessStatus 'requested' => 'accepted'

Fulfiller -> Placer: SubscriptionStatus notification - Task updated

note over Placer, Fulfiller: Could also have that the Fulfiller makes a Plan, RequestOrchestration, etc. with Task.output\nA Placer could then update the Task to Accepted if they accept the Fulfiller's Proposal.

Placer --> Placer: Update status of tracking if needed, such as ServiceRequest.status. 

group If Fulfiller will perform a more specific service
    Fulfiller -[hidden]> Placer:
    Fulfiller <- Fulfiller: Create ServiceRequest with ServiceRequest.basedOn\nreferring to the Placer's ServiceRequest
end


==Perform Service==
group If Fulfiller creating an output document
    Fulfiller -[hidden]> Placer:
    Fulfiller <- Fulfiller: Performs Service, creates Output
    Fulfiller <- Fulfiller: Updates Task.output == Output
end

Fulfiller <- Fulfiller: Update Task.businessStatus

Fulfiller -> Placer: SubscriptionStatus Notification for Task update

group Optionally, if Placer needs to be able to review the output
    Fulfiller -[hidden]> Placer:
    Placer -> Fulfiller: Reads output via Task.output
end

Placer -> Placer: Update ServiceRequest.status == Completed

group Optionally - if Placer needs to surface that outcome in future
    Fulfiller -[hidden]> Placer:
    Placer <-> Fulfiller: Read Output Document if not received within SubscriptionStatus Notification
    Placer -> Placer: Save a copy. If needed, indicate Fulfiller's document\n is source of truth via Provenance.location, etc. Note the output may also\ndirectly reference the performer.
   
end

@enduml
